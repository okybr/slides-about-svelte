<script lang="ts">

  import SwiperCore, { EffectCards, Keyboard } from 'swiper';
  import { Swiper, SwiperSlide } from 'swiper/svelte';
  import 'swiper/css/bundle';

  SwiperCore.use([EffectCards, Keyboard]);
</script>

<Swiper effect="{'cards'}" keyboard='{{ "enabled": true }}'>
<SwiperSlide>

# Svelte - A truely reactive web framework

A talk by Kemal at BR/SEP/WebTeam on 2021-10-13

</SwiperSlide>
<SwiperSlide>

# What is reactivity?

Reactivity means that functions interact with their inputs in real-time.

</SwiperSlide>
<SwiperSlide>

## Example: Not reactive

```javascript
alpha = 0;
beta = alpha;
alpha = 1;

expect(alph).toBe(1);
expect(beta).toBe(1);
```

</SwiperSlide>
<SwiperSlide>

## Example: Reactivity

Ways to implement reactivity in JavaScript:

- observers
- (magic:)

```javascript
alpha = 0;
$: beta = alpha;
alpha = 1;

expect(alph).toBe(1);
expect(beta).toBe(1);
```

</SwiperSlide>
<SwiperSlide>

# How have web frameworks been achieving reactivity?

Let's take a look at React.js:

- application structured in *components* with input parameters

- application has its own Virtual Document Object Model (*VDOM*)
beside the browsers DOM

- when an input parameter changes, then
  - the whole component is recalculated and
  - the VDOM and DOM are compared so that
  - the right elements in the DOM can be modified.

- React.js is reactive but the reactivity is very expensive

</SwiperSlide>
<SwiperSlide>

# How does Svelte achieve reactivity?

## Syntax and compilation

- Svelte provides a compiler

- Svelte syntax is
  - syntactically a subset of JavaScript but
  - semantically interpreted different

- Svelte code is often split into html-like tags,
similar to .vue-files

</SwiperSlide>
</Swiper>

<style lang="postcss">
  :global(*) {
    box-sizing: border-box;
  }

  :global(body) {
    margin: 0px;
    font-size: 2rem;
    font-family: 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
  }

  :global(h1, h2, h3, h4, h5, h6) {
    font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif;
  }

  :global(pre) {
    font-size: 2.2rem;
    padding: 5%;
    border-radius: 5%;
    background-color: rgba(255, 255, 255, 0.281);
  }

  :global(#app) {
    height: 100vh;
    width: 100vw;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  :global(.swiper) {
    height: 80%;
    width: 50%;
    color: white;
  }

  :global(.swiper-slide) {
    padding: 5%;
    border-radius: 5%;
  }

  :global(.swiper-slide > *:first-child) {
    margin-top: 0px;
  }

  :global(.swiper-slide:nth-child(1n)) { background-color: rgb(206, 17, 17); }
  :global(.swiper-slide:nth-child(2n)) { background-color: rgb(0, 140, 255); }
  :global(.swiper-slide:nth-child(3n)) { background-color: rgb(10, 184, 111); }
  :global(.swiper-slide:nth-child(4n)) { background-color: rgb(211, 122, 7); }
  :global(.swiper-slide:nth-child(5n)) { background-color: rgb(118, 163, 12); }
  :global(.swiper-slide:nth-child(6n)) { background-color: rgb(180, 10, 47); }
  :global(.swiper-slide:nth-child(7n)) { background-color: rgb(35, 99, 19); }
  :global(.swiper-slide:nth-child(8n)) { background-color: rgb(0, 68, 255); }
  :global(.swiper-slide:nth-child(9n)) { background-color: rgb(218, 12, 218); }
  :global(.swiper-slide:nth-child(10n)) { background-color: rgb(54, 94, 77); }
</style>
